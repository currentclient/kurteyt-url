# Name of the service
service: kurteyt-url

# Pin framework version
frameworkVersion: "4"

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function

custom:
  # Plugin options
  pythonRequirements:
    # Not going to use poetry, will manage the requirements file for each seperate
    # function
    usePoetry: false
    slim: true
  dependencies:
    domainNameCertSsmName:
      dev: /cc/east/dev/acm/arn/short
      prd: /cc/east/prd/acm/arn/becurrent

params:
  default:
    cognitoUserPoolGroupUsersId: users
    cognitoUserPoolGroupGovernorId: governors
    # Name of the cloudformation stack
    stackName: cc-east-${self:provider.stage}-stack-kurteyt
    # Name of the api
    apiName: cc-east-${self:provider.stage}-api-kurteyt
    # Name of the lambda
    lambdaNameKurteytApi: cc-east-${self:provider.stage}-lambda-kurteyt-api
    lambdaRoleKurteytApi: cc-east-${self:provider.stage}-role-kurteyt-api
    lambdaNameKurteytEdge: cc-east-${self:provider.stage}-lambda-kurteyt-edge
    lambdaRoleKurteytEdge: cc-east-${self:provider.stage}-role-kurteyt-edge
    # Name of the table
    tableNameKurteyt: cc-east-${self:provider.stage}-db-kurteyt
    # Bucket for logs
    bucketNameWebLogs: cc-east-${self:provider.stage}-bucket-kurteyt-logs
    domainNameCertArn: ${ssm:${self:custom.dependencies.domainNameCertSsmName.${self:provider.stage}}}

  prd:
    edgeHandler: edge.main.handler_prd
    cognitoUserPoolClientsWeb: 26mf5j64glf9ri02fmpjqqgkhk
    cognitoUserPoolClientsServices: 3m83rvmir1a7qo8npivnci89a1
    cognitoUserPoolClientsInternal: ldnr04o1efig1kbbu2kgdfj84
    cognitoUserPool: https://cognito-idp.us-west-2.amazonaws.com/us-west-2_pDUWHeGaJ
    cognitoUserPoolId: us-west-2_pDUWHeGaJ
    cognitoRegion: us-west-2
    domainName: becurrent.io
    domainNameApi: api.becurrent.io

  dev:
    edgeHandler: edge.main.handler_dev
    cognitoUserPoolClientsWeb: 6ucccdh6bialie4tjsibe0v9e0
    cognitoUserPoolClientsServices: 6dat4ip3ivr1b7sb4r5bcbqh09
    cognitoUserPoolClientsInternal: 5eld701ippd7d0d8nugdkvtcl1
    cognitoUserPool: https://cognito-idp.us-west-2.amazonaws.com/us-west-2_prmFZ0Fif
    cognitoUserPoolId: us-west-2_prmFZ0Fif
    cognitoRegion: us-west-2
    domainName: cclient.io
    domainNameApi: api.cclient.io

provider:
  name: aws
  region: "us-east-1"
  stage: ${opt:stage, 'dev'}
  stackName: ${param:stackName}
  stackTags: ${file(./tags.yml)}
  runtime: python3.12
  logRetentionInDays: 7
  timeout: 26 # HTTP api timeout is 29s
  memorySize: 128
  versionFunctions: false
  logs:
    httpApi: true
  tracing:
    apiGateway: true
    lambda: true
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:8000
        - http://0.0.0.0:8000
        - https://${param:domainName}
      allowedHeaders:
        - Content-Type
        - Authorization
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      allowCredentials: true
    # Use custom name for the API Gateway API
    name: ${param:apiName}
    payload: "2.0"
    authorizers:
      # JWT authorizers to back HTTP API endpoints
      cognitoJwtAuthorizer:
        # Point request header at which JWT token will be provided
        identitySource: $request.header.Authorization
        # Issuer url, in case of Cognito User Pools url will be like:
        # https://cognito-idp.${region}.amazonaws.com/${cognitoPoolId}
        issuerUrl: ${param:cognitoUserPool}
        # Audience for which access is intended
        # In case of Cognito User Pools we need to list client ids
        audience:
          - ${param:cognitoUserPoolClientsWeb}
          - ${param:cognitoUserPoolClientsServices}
          - ${param:cognitoUserPoolClientsInternal}

package:
  individually: true

functions:
  app:
    name: ${param:lambdaNameKurteytApi}
    description: kurteyts url api
    memorySize: 512
    handler: app.main.handler
    module: module-app
    environment:
      LOG_AT_LEVEL: DEBUG
      KURTEYT_TABLE: ${param:tableNameKurteyt}
    iamRoleStatementsName: ${param:lambdaRoleKurteytApi}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Sid: "AllowKurteytTableCRUD"
        Effect: "Allow"
        Action:
          - "dynamodb:BatchGetItem"
          - "dynamodb:GetItem"
          - "dynamodb:Query"
          - "dynamodb:Scan"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:PutItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:DeleteItem"
        Resource:
          - !GetAtt KurteytTable.Arn
      - Sid: "AllowCognitoAuth"
        Effect: "Allow"
        Action:
          - "cognito-idp:AdminInitiateAuth"
          - "cognito-idp:AdminGetUser"
        Resource:
          - !Sub "arn:aws:cognito-idp:${param:cognitoRegion}:${AWS::AccountId}:userpool/${param:cognitoUserPoolId}"
    events:
      # Priority 1 - Allow CORS options calls
      - httpApi:
          path: /api/v1/{proxy+}
          method: "OPTIONS"
      # Priority 2 - Allow public level calls
      - httpApi:
          path: /api/v1/public/{proxy+}
          method: "*"
      # Priority 3 - Authenticated Routes to api
      - httpApi:
          path: /api/{proxy+}
          method: "*"
          authorizer:
            name: cognitoJwtAuthorizer
            scopes: # Optional
              - aws.cognito.signin.user.admin
      # Priority 4 - Allow top level GETS
      - httpApi:
          path: /{proxy+}
          method: "GET"

  edge:
    name: ${param:lambdaNameKurteytEdge}
    description: processes viewer request on cloudfront, handles redirect or passthrough
    handler: ${param:edgeHandler} # dev or prd handler to hardcode the table name in
    module: module-edge
    # versionFunctions: true
    timeout: 3
    memorySize: 128
    role: !GetAtt CloudfrontEdgeFunctionRole.Arn
# Resources
resources:
  - ${file(infra/table.yaml)}
  - ${file(infra/domain.yaml)}
  - ${file(infra/cloudfront.yaml)}
  - ${file(infra/outputs.yaml)}
