# Name of the service
service: kurteyt-url

# Pin framework version
frameworkVersion: ">=2.0.0"

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin
  # - serverless-dynamodb-local

# Custom variables, try to put config variable names here, for easy reference
custom:
  # Naming conventions helpers
  naming:
    regionTranslation:
      us-east-1: east
    # Prefix for the org
    org: cc
    region: ${self:custom.naming.regionTranslation.${self:provider.region}}
    prefix: ${self:custom.naming.org}-${self:custom.naming.region}-${self:provider.stage} # cc-west-dev
    prefixParm: /${self:custom.naming.org}/${self:custom.naming.region}/${self:provider.stage} # /cc/west/dev
    type:
      stack: ${self:custom.naming.prefix}-stack
      api: ${self:custom.naming.prefix}-api
      lambda: ${self:custom.naming.prefix}-lambda
      role: ${self:custom.naming.prefix}-role
      db: ${self:custom.naming.prefix}-db
      bucket: ${self:custom.naming.prefix}-bucket
    use:
      # Name of the cloudformation stack
      stackName: ${self:custom.naming.type.stack}-kurteyt
      # Name of the api
      apiName: ${self:custom.naming.type.api}-kurteyt
      # Name of the lambda
      lambdaNameKurteytApi: ${self:custom.naming.type.lambda}-kurteyt-api
      lambdaRoleKurteytApi: ${self:custom.naming.type.role}-kurteyt-api
      lambdaNameKurteytEdge: ${self:custom.naming.type.lambda}-kurteyt-edge
      lambdaRoleKurteytEdge: ${self:custom.naming.type.role}-kurteyt-edge
      # Name of the table
      tableNameKurteyt: ${self:custom.naming.type.db}-kurteyt
      domainName: ${env:DOMAIN_NAME}
      domainNameApi: api.${env:DOMAIN_NAME}
      domainNameCertArn: ${ssm:/cc/east/${self:provider.stage}/acm/arn/${env:DOMAIN_NAME_CERT_LOOKUP}}
      # Bucket for logs
      bucketNameWebLogs: ${self:custom.naming.type.bucket}-kurteyt-logs
  dependencies:
    cognitoUserPoolId:
      dev: us-west-2_prmFZ0Fif
      prd: us-west-2_pDUWHeGaJ
    cognitoUserPoolGroupUsersId: users
    cognitoUserPoolGroupGovernorId: governors
    cognitoUserPool:
      dev: https://cognito-idp.${self:provider.region}.amazonaws.com/us-west-2_prmFZ0Fif
      prd: https://cognito-idp.${self:provider.region}.amazonaws.com/us-west-2_pDUWHeGaJ
    cognitoUserPoolClients:
      dev:
        web: 6ucccdh6bialie4tjsibe0v9e0
        services: 6dat4ip3ivr1b7sb4r5bcbqh09
        internal: 5eld701ippd7d0d8nugdkvtcl1
      prd:
        web: 26mf5j64glf9ri02fmpjqqgkhk
        services: 3m83rvmir1a7qo8npivnci89a1
        internal: ldnr04o1efig1kbbu2kgdfj84
  edgeHandler:
    dev: edge.main.handler_dev
    prd: edge.main.handler_prd
  # Plugin options
  dotenv:
    # default: project root
    # Lambda at edge functions cannot have variables
    include:
      - []
  # serverless-iam-roles-per-function:
  #   defaultInherit: true
  pythonRequirements:
    # Not going to use poetry, will manage the requirements file for each seperate
    # function
    usePoetry: false
    slim: true
    # Will default to using the app requirements. This allows the app function to be
    # packaged without using the 'module' property, which when used, removes the folder
    # app, so it doesnt play nice.
    # fileName: app/requirements.txt
  serverless-offline:
    noPrependStageInUrl: true
    ignoreJWTSignature: true
    # noAuth: true
    httpPort: 8001

provider:
  name: aws
  region: "us-east-1"
  stage: ${opt:stage, 'dev'}
  stackName: ${self:custom.naming.use.stackName}
  stackTags: ${file(./tags.yml)}
  runtime: python3.8
  timeout: 26 # HTTP api timeout is 29s
  memorySize: 128
  versionFunctions: false
  logs:
    httpApi: true
  tracing:
    apiGateway: true
    lambda: true
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:8000
        - http://0.0.0.0:8000
        - https://${env:DOMAIN_NAME}
      allowedHeaders:
        - Content-Type
        - Authorization
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      allowCredentials: true
    # Use custom name for the API Gateway API
    name: ${self:custom.naming.use.apiName}
    payload: "2.0"
    authorizers:
      # JWT authorizers to back HTTP API endpoints
      cognitoJwtAuthorizer:
        # Point request header at which JWT token will be provided
        identitySource: $request.header.Authorization
        # Issuer url, in case of Cognito User Pools url will be like:
        # https://cognito-idp.${region}.amazonaws.com/${cognitoPoolId}
        issuerUrl: ${self:custom.dependencies.cognitoUserPool.${self:provider.stage}}
        # Audience for which access is intended
        # In case of Cognito User Pools we need to list client ids
        audience:
          - "${self:custom.dependencies.cognitoUserPoolClients.${self:provider.stage}.web}"
          - "${self:custom.dependencies.cognitoUserPoolClients.${self:provider.stage}.services}"
          - "${self:custom.dependencies.cognitoUserPoolClients.${self:provider.stage}.internal}"

package:
  individually: true

functions:
  app:
    name: ${self:custom.naming.use.lambdaNameKurteytApi}
    description: kurteyts url api
    memorySize: 512
    handler: app.main.handler
    module: module-app
    environment:
      LOG_AT_LEVEL: DEBUG
      KURTEYT_TABLE: ${self:custom.naming.use.tableNameKurteyt}
    iamRoleStatementsName: ${self:custom.naming.use.lambdaRoleKurteytApi}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Sid: "AllowKurteytTableCRUD"
        Effect: "Allow"
        Action:
          - "dynamodb:BatchGetItem"
          - "dynamodb:GetItem"
          - "dynamodb:Query"
          - "dynamodb:Scan"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:PutItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:DeleteItem"
        Resource:
          - !GetAtt KurteytTable.Arn
    events:
      # Priority 1 - Allow CORS options calls
      - httpApi:
          path: /api/v1/{proxy+}
          method: "OPTIONS"
      # Priority 2 - Allow public level calls
      - httpApi:
          path: /api/v1/public/{proxy+}
          method: "*"
      # Priority 3 - Authenticated Routes to api
      - httpApi:
          path: /api/{proxy+}
          method: "*"
          authorizer:
            name: cognitoJwtAuthorizer
            scopes: # Optional
              - aws.cognito.signin.user.admin
      # Priority 4 - Allow top level GETS
      - httpApi:
          path: /{proxy+}
          method: "GET"

  edge:
    name: ${self:custom.naming.use.lambdaNameKurteytEdge}
    description: processes viewer request on cloudfront, handles redirect or passthrough
    handler: ${self:custom.edgeHandler.${self:provider.stage}} # dev or prd handler to hardcode the table name in
    module: module-edge
    # versionFunctions: true
    timeout: 3
    memorySize: 128
    role: !GetAtt CloudfrontEdgeFunctionRole.Arn

# Resources
resources:
  - ${file(infra/table.yaml)}
  - ${file(infra/domain.yaml)}
  - ${file(infra/cloudfront.yaml)}
  - ${file(infra/outputs.yaml)}
